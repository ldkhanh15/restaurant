import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../application/providers.dart';

class AIChatWidget extends ConsumerStatefulWidget {
  const AIChatWidget({super.key});

  @override
  ConsumerState<AIChatWidget> createState() => _AIChatWidgetState();
}

class _AIChatWidgetState extends ConsumerState<AIChatWidget> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  bool _isMinimized = false;

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _sendMessage() {
    final message = _messageController.text.trim();
    if (message.isEmpty) return;

    // Add user message
    ref.read(aiChatMessagesProvider.notifier).addMessage({
      'id': DateTime.now().millisecondsSinceEpoch.toString(),
      'text': message,
      'isUser': true,
      'timestamp': DateTime.now(),
    });

    _messageController.clear();

    // Simulate AI typing
    ref.read(isAITypingProvider.notifier).setTyping(true);

    // Generate AI response
    Future.delayed(const Duration(seconds: 2), () {
      final aiResponse = _generateAIResponse(message);
      ref.read(isAITypingProvider.notifier).setTyping(false);
      ref.read(aiChatMessagesProvider.notifier).addMessage({
        'id': DateTime.now().millisecondsSinceEpoch.toString(),
        'text': aiResponse,
        'isUser': false,
        'timestamp': DateTime.now(),
      });
    });
  }

  String _generateAIResponse(String userMessage) {
    final message = userMessage.toLowerCase();
    
    if (message.contains('menu') || message.contains('th·ª±c ƒë∆°n')) {
      return 'Ch√∫ng t√¥i c√≥ nhi·ªÅu m√≥n ƒÉn ngon! B·∫°n c√≥ th·ªÉ xem th·ª±c ƒë∆°n t·∫°i m√†n h√¨nh Menu. T√¥i c√≥ th·ªÉ gi·ªõi thi·ªáu m·ªôt s·ªë m√≥n ph·ªï bi·∫øn nh∆∞ Ph·ªü b√≤, B√∫n ch·∫£, C∆°m t·∫•m...';
    } else if (message.contains('ƒë·∫∑t b√†n') || message.contains('reservation')) {
      return 'ƒê·ªÉ ƒë·∫∑t b√†n, b·∫°n c√≥ th·ªÉ ch·ªçn b√†n t·ª´ danh s√°ch ho·∫∑c s∆° ƒë·ªì b√†n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m b√†n ph√π h·ª£p v·ªõi s·ªë l∆∞·ª£ng kh√°ch. B·∫°n mu·ªën ƒë·∫∑t b√†n cho bao nhi√™u ng∆∞·ªùi?';
    } else if (message.contains('gi√°') || message.contains('price')) {
      return 'Gi√° c·∫£ c·ªßa ch√∫ng t√¥i r·∫•t h·ª£p l√Ω! Ph√≠ ƒë·∫∑t b√†n t·ª´ 150,000ƒë - 600,000ƒë t√πy lo·∫°i b√†n. M√≥n ƒÉn t·ª´ 20,000ƒë - 80,000ƒë. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt trong th·ª±c ƒë∆°n.';
    } else if (message.contains('s·ª± ki·ªán') || message.contains('event')) {
      return 'Ch√∫ng t√¥i th∆∞·ªùng t·ªï ch·ª©c c√°c s·ª± ki·ªán ƒë·∫∑c bi·ªát nh∆∞ ƒë√™m nh·∫°c acoustic, l·ªÖ h·ªôi ·∫©m th·ª±c, workshop n·∫•u ƒÉn... B·∫°n c√≥ th·ªÉ xem danh s√°ch s·ª± ki·ªán s·∫Øp t·ªõi trong m·ª•c S·ª± ki·ªán.';
    } else if (message.contains('loyalty') || message.contains('th√†nh vi√™n')) {
      return 'Ch√∫ng t√¥i c√≥ ch∆∞∆°ng tr√¨nh th√†nh vi√™n v·ªõi nhi·ªÅu ∆∞u ƒë√£i! B·∫°n c√≥ th·ªÉ t√≠ch ƒëi·ªÉm v·ªõi m·ªói l·∫ßn s·ª≠ d·ª•ng d·ªãch v·ª• v√† ƒë·ªïi l·∫•y ph·∫ßn th∆∞·ªüng. Xem chi ti·∫øt trong m·ª•c Ch∆∞∆°ng tr√¨nh th√†nh vi√™n.';
    } else if (message.contains('c·∫£m ∆°n') || message.contains('thank')) {
      return 'Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n. N·∫øu c√≥ th·∫Øc m·∫Øc g√¨ kh√°c, ƒë·ª´ng ng·∫°i h·ªèi nh√©! üòä';
    } else if (message.contains('gi·ªù') || message.contains('time')) {
      return 'Nh√† h√†ng ch√∫ng t√¥i m·ªü c·ª≠a t·ª´ 11:00 - 22:00 h√†ng ng√†y. B·∫°n c√≥ th·ªÉ ƒë·∫∑t b√†n trong khung gi·ªù n√†y.';
    } else if (message.contains('ƒë·ªãa ch·ªâ') || message.contains('address')) {
      return 'Nh√† h√†ng ch√∫ng t√¥i t·ªça l·∫°c t·∫°i 123 Nguy·ªÖn Du, Hai B√† Tr∆∞ng, H√† N·ªôi. R·∫•t d·ªÖ t√¨m v√† c√≥ ch·ªó ƒë·ªó xe.';
    } else {
      return 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa nh√† h√†ng. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ th·ª±c ƒë∆°n\n‚Ä¢ ƒê·∫∑t b√†n\n‚Ä¢ Th√¥ng tin s·ª± ki·ªán\n‚Ä¢ Ch∆∞∆°ng tr√¨nh th√†nh vi√™n\n‚Ä¢ V√† nhi·ªÅu h∆°n n·ªØa!\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?';
    }
  }

  void _handleQuickReply(String reply) {
    _messageController.text = reply;
    _sendMessage();
  }

  @override
  Widget build(BuildContext context) {
    final messages = ref.watch(aiChatMessagesProvider);
    final isTyping = ref.watch(isAITypingProvider);
    final isOpen = ref.watch(isAIChatOpenProvider);

    if (!isOpen) {
      return Positioned(
        bottom: 16,
        right: 16,
        child: FloatingActionButton(
          heroTag: "ai_chat_fab",
          onPressed: () {
            ref.read(isAIChatOpenProvider.notifier).open();
          },
          child: const Icon(Icons.chat),
        ),
      );
    }

    return Positioned(
      bottom: 16,
      right: 16,
      child: Container(
        width: 320,
        height: _isMinimized ? 60 : 500,
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surface,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.primary,
                borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
              ),
              child: Row(
                children: [
                  const CircleAvatar(
                    radius: 16,
                    backgroundColor: Colors.white,
                    child: Icon(Icons.smart_toy, color: Colors.blue, size: 20),
                  ),
                  const SizedBox(width: 12),
                  const Expanded(
                    child: Text(
                      'Tr·ª£ l√Ω AI',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  IconButton(
                    onPressed: () {
                      setState(() {
                        _isMinimized = !_isMinimized;
                      });
                    },
                    icon: Icon(
                      _isMinimized ? Icons.expand_less : Icons.expand_more,
                      color: Colors.white,
                    ),
                  ),
                  IconButton(
                    onPressed: () {
                      ref.read(isAIChatOpenProvider.notifier).close();
                    },
                    icon: const Icon(Icons.close, color: Colors.white),
                  ),
                ],
              ),
            ),
            
            if (!_isMinimized) ...[
              // Messages
              Expanded(
                child: messages.isEmpty
                    ? _buildWelcomeMessage()
                    : ListView.builder(
                        controller: _scrollController,
                        padding: const EdgeInsets.all(16),
                        itemCount: messages.length + (isTyping ? 1 : 0),
                        itemBuilder: (context, index) {
                          if (index == messages.length && isTyping) {
                            return _buildTypingIndicator();
                          }
                          final message = messages[index];
                          return _buildMessageBubble(message);
                        },
                      ),
              ),
              
              // Input area
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.surfaceVariant,
                  borderRadius: const BorderRadius.vertical(bottom: Radius.circular(16)),
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _messageController,
                        decoration: const InputDecoration(
                          hintText: 'Nh·∫≠p tin nh·∫Øn...',
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        ),
                        onSubmitted: (_) => _sendMessage(),
                      ),
                    ),
                    const SizedBox(width: 8),
                    IconButton(
                      onPressed: _sendMessage,
                      icon: const Icon(Icons.send),
                    ),
                  ],
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildWelcomeMessage() {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(Icons.smart_toy, size: 48, color: Colors.blue),
          const SizedBox(height: 16),
          const Text(
            'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ nh√† h√†ng, ƒë·∫∑t b√†n, xem th·ª±c ƒë∆°n v√† nhi·ªÅu h∆°n n·ªØa!',
            textAlign: TextAlign.center,
            style: TextStyle(color: Colors.grey),
          ),
          const SizedBox(height: 24),
          _buildQuickReplies(),
        ],
      ),
    );
  }

  Widget _buildQuickReplies() {
    final quickReplies = [
      'Xem th·ª±c ƒë∆°n',
      'ƒê·∫∑t b√†n',
      'S·ª± ki·ªán',
      'Gi√° c·∫£',
    ];

    return Wrap(
      spacing: 8,
      runSpacing: 8,
      children: quickReplies.map((reply) {
        return ActionChip(
          label: Text(reply),
          onPressed: () => _handleQuickReply(reply),
        );
      }).toList(),
    );
  }

  Widget _buildMessageBubble(Map<String, dynamic> message) {
    final isUser = message['isUser'] as bool;
    
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        mainAxisAlignment: isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: [
          if (!isUser) ...[
            const CircleAvatar(
              radius: 12,
              backgroundColor: Colors.blue,
              child: Icon(Icons.smart_toy, color: Colors.white, size: 16),
            ),
            const SizedBox(width: 8),
          ],
          Flexible(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              decoration: BoxDecoration(
                color: isUser 
                    ? Theme.of(context).colorScheme.primary
                    : Theme.of(context).colorScheme.surfaceVariant,
                borderRadius: BorderRadius.circular(16),
              ),
              // Sanitize message content: sometimes code/path/debug may push raw
              // Map/List objects or their toString() (e.g. "{id: 1111..., name: ...}").
              // Hide those to avoid exposing internal IDs in the UI.
              child: (() {
                final raw = message['text'];

                // If the message payload is a Map or List, don't render it.
                if (raw is Map || raw is List) {
                  return const SizedBox.shrink();
                }

                final text = raw?.toString() ?? '';

                // If it looks like an object dump containing an 'id' field, hide it.
                final objectLike = RegExp(r"^\s*\{[^}]*\bid\b\s*[:=]").hasMatch(text);
                if (objectLike) {
                  return const SizedBox.shrink();
                }

                return Text(
                  text,
                  style: TextStyle(
                    color: isUser 
                        ? Colors.white
                        : Theme.of(context).colorScheme.onSurfaceVariant,
                  ),
                );
              })(),
            ),
          ),
          if (isUser) ...[
            const SizedBox(width: 8),
            const CircleAvatar(
              radius: 12,
              backgroundColor: Colors.grey,
              child: Icon(Icons.person, color: Colors.white, size: 16),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildTypingIndicator() {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          const CircleAvatar(
            radius: 12,
            backgroundColor: Colors.blue,
            child: Icon(Icons.smart_toy, color: Colors.white, size: 16),
          ),
          const SizedBox(width: 8),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surfaceVariant,
              borderRadius: BorderRadius.circular(16),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                const SizedBox(width: 8),
                const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                ),
                const SizedBox(width: 8),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
