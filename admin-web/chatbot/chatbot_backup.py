# Chatbot HIWELL Restaurant - Enhanced with Vision, Speech-to-Text, Recommendations, and Improved Memory
# pip install gradio google-generativeai speechrecognition Pillow sqlite3 requests uuid

import gradio as gr
import datetime
import json
import google.generativeai as genai
import os
import speech_recognition as sr
from PIL import Image
import io
import uuid
import requests

# Configure Gemini API
genai.configure(
    api_key=os.getenv("GOOGLE_API_KEY", "AIzaSyCeLmzAGwB1Pq - Z7TdkTNA4bZ00JfKlAsI")
)
model = genai.GenerativeModel("gemini-1.5-flash")

BE_URL = "http://localhost:3000/api/chat"  # Thay b·∫±ng URL production n·∫øu c·∫ßn

# Restaurant Info
RESTAURANT_NAME = "HIWELL"
ADDRESS = "54 Nguy·ªÖn L∆∞∆°ng B·∫±ng, Li√™n Chi·ªÉu, ƒê√† N·∫µng"
OPEN_HOURS = "8:00 - 22:00"
PHONE = "0123456789"
EMAIL = "info@hiwell.com"
PROMOTIONS = "Gi·∫£m 10% cho nh√≥m tr√™n 5 ng∆∞·ªùi, gi·∫£m 20% ƒë·ªì u·ªëng t·ª´ 20:00-22:00."
PAYMENTS = "Ti·ªÅn m·∫∑t, th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n, v√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)."
SERVICES = "B√£i ƒë·ªó xe mi·ªÖn ph√≠, WiFi t·ªëc ƒë·ªô cao, khu vui ch∆°i tr·∫ª em, ph√≤ng ri√™ng, giao h√†ng qua GrabFood/ShopeeFood."
DIRECTIONS = "T·ª´ trung t√¢m ƒê√† N·∫µng, ƒëi Nguy·ªÖn T·∫•t Th√†nh ƒë·∫øn Li√™n Chi·ªÉu, r·∫Ω ph·∫£i v√†o Nguy·ªÖn L∆∞∆°ng B·∫±ng, nh√† h√†ng b√™n tr√°i sau 500m."

MENU = [
    {
        "name": "Grilled Salmon",
        "price": 150000,
        "description": "C√° h·ªìi n∆∞·ªõng t∆∞∆°i v·ªõi th·∫£o m·ªôc v√† s·ªët chanh, k√®m rau c·ªß h·∫•p.",
        "ingredients": ["c√° h·ªìi", "th·∫£o m·ªôc", "chanh", "rau c·ªß"],
        "tags": ["seafood", "grilled", "fish", "healthy"],
    },
    {
        "name": "Beef Steak",
        "price": 200000,
        "description": "Th·ªãt b√≤ √öc n∆∞·ªõng t√°i/medium/well v·ªõi s·ªët ti√™u ƒëen, k√®m khoai t√¢y nghi·ªÅn.",
        "ingredients": ["th·ªãt b√≤", "ti√™u ƒëen", "khoai t√¢y"],
        "tags": ["meat", "steak", "beef"],
    },
    {
        "name": "Chicken Salad",
        "price": 100000,
        "description": "Salad g√† n∆∞·ªõng v·ªõi rau t∆∞∆°i, c√† chua, d∆∞a leo v√† s·ªët mayonnaise nh·∫π.",
        "ingredients": ["g√†", "rau t∆∞∆°i", "c√† chua", "d∆∞a leo", "mayonnaise"],
        "tags": ["light", "salad", "chicken", "healthy"],
    },
    {
        "name": "Chocolate Cake",
        "price": 50000,
        "description": "B√°nh chocolate tan ch·∫£y v·ªõi l·ªõp kem vani, trang tr√≠ tr√°i c√¢y t∆∞∆°i.",
        "ingredients": ["chocolate", "kem vani", "tr√°i c√¢y"],
        "tags": ["dessert", "cake", "chocolate", "sweet"],
    },
    {
        "name": "Fruit Juice",
        "price": 30000,
        "description": "N∆∞·ªõc √©p tr√°i c√¢y t∆∞∆°i h·ªón h·ª£p (cam, d·ª©a, t√°o).",
        "ingredients": ["cam", "d·ª©a", "t√°o"],
        "tags": ["drink", "juice", "fruit", "healthy"],
    },
]

TABLES = {
    "T1": {"capacity": 4, "location": "near_window", "features": "View ƒë·∫πp ra bi·ªÉn"},
    "T2": {
        "capacity": 6,
        "location": "garden",
        "features": "Kh√¥ng gian xanh, tho√°ng ƒë√£ng",
    },
    "T3": {
        "capacity": 10,
        "location": "vip_room",
        "features": "Ph√≤ng ri√™ng, m√°y l·∫°nh, karaoke",
    },
    "T4": {
        "capacity": 2,
        "location": "bar",
        "features": "G·∫ßn qu·∫ßy bar, ph√π h·ª£p c·∫∑p ƒë√¥i",
    },
}


# Helper Functions
def format_reservation(info):
    return (
        f"üìå ƒê∆°n ƒë·∫∑t b√†n:\n"
        f"- S·ª± ki·ªán: {info.get('event', 'N/A')}\n"
        f"- S·ªë ng∆∞·ªùi: {info.get('seats', 'N/A')}\n"
        f"- V·ªã tr√≠: {info.get('location', 'N/A')}\n"
        f"- M√≥n ƒë√£ ch·ªçn: {', '.join(info.get('menu_selected', [])) or 'N/A'}\n"
        f"- D·ªã ·ª©ng: {', '.join(info.get('allergies', [])) or 'N/A'}\n"
        f"- Y√™u c·∫ßu ƒë·∫∑c bi·ªát: {info.get('special_requests', 'N/A')}\n"
        f"- Gi·ªù: {info.get('time', 'N/A')}\n"
        f"- B√†n: {info.get('table', 'N/A')}\n"
        f"- Th·ªùi gian ƒë·∫∑t: {info.get('created_at', 'N/A')}"
    )


def suggest_menu_based_on_history(history):
    if not history:
        return []
    tag_count = {}
    for res in history:
        for item in res.get("menu_selected", []):
            for m in MENU:
                if m["name"].lower() == item.lower():
                    for tag in m["tags"]:
                        tag_count[tag] = tag_count.get(tag, 0) + 1
    if not tag_count:
        return []
    top_tags = sorted(tag_count, key=tag_count.get, reverse=True)[:3]
    suggestions = set()
    for m in MENU:
        if any(t in m["tags"] for t in top_tags):
            suggestions.add(
                f"{m['name']} ({m['price']} VND) - {m['description'][:50]}..."
            )
    return list(suggestions)


def suggest_table(seats, preferences):
    available = [t for t, info in TABLES.items() if info["capacity"] >= seats]
    if preferences:
        available = [
            t
            for t in available
            if any(
                p.lower() in TABLES[t]["location"].lower()
                or p.lower() in TABLES[t]["features"].lower()
                for p in preferences
            )
        ]
    return available[0] if available else None


# Chatbot Logic
def process_input(message, audio, image, history, session_id):
    # T·∫°o session m·ªõi n·∫øu ch∆∞a c√≥
    if not session_id:
        user_id = "UUID1"  # Gi·∫£ s·ª≠ l·∫•y t·ª´ auth/user input, thay b·∫±ng logic th·ª±c (v√≠ d·ª•: t·ª´ phone)
        try:
            resp = requests.post(
                f"{BE_URL}/sessions",
                json={
                    "user_id": user_id,
                    "channel": "web",
                    "context": {},  # C√≥ th·ªÉ th√™m context t·ª´ reservation
                },
            )
            resp.raise_for_status()
            session_id = resp.json()["id"]
        except Exception as e:
            print(f"Error creating session: {e}")
            return (
                history or [],
                "L·ªói kh·ªüi t·∫°o chat, th·ª≠ l·∫°i sau!",
                None,
                None,
                session_id,
            )

    # Handle speech-to-text
    text_input = message
    if audio:
        recognizer = sr.Recognizer()
        with sr.AudioFile(audio) as source:
            audio_data = recognizer.record(source)
            try:
                text_input = recognizer.recognize_google(audio_data, language="vi-VN")
            except sr.UnknownValueError:
                return (
                    history or [],
                    "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu gi·ªçng n√≥i. H√£y th·ª≠ l·∫°i ho·∫∑c nh·∫≠p vƒÉn b·∫£n nh√©!",
                    None,
                    None,
                    session_id,
                )
            except sr.RequestError:
                return (
                    history or [],
                    "L·ªói k·∫øt n·ªëi d·ªãch v·ª• nh·∫≠n di·ªán gi·ªçng n√≥i. H√£y th·ª≠ l·∫°i sau!",
                    None,
                    None,
                    session_id,
                )

    # Add user input to history
    user_content = text_input if text_input else "[H√¨nh ·∫£nh]"
    if not history:
        history = []
    history.append({"role": "user", "content": user_content})

    # L∆∞u user message l√™n BE
    try:
        requests.post(
            f"{BE_URL}/messages",
            json={
                "session_id": session_id,
                "sender_type": "user",
                "message_text": user_content,
            },
        ).raise_for_status()
    except Exception as e:
        print(f"Error saving user message: {e}")

    # Handle image
    if image:
        message = (
            {"text": text_input, "files": [image]} if text_input else {"files": [image]}
        )
    else:
        message = text_input

    # L·∫•y history t·ª´ BE ƒë·ªÉ sync (t√πy ch·ªçn, d√πng local ƒë·ªÉ nhanh)
    # history_from_be = get_conversation_history(session_id)
    # history = history_from_be  # N·∫øu mu·ªën sync ho√†n to√†n

    # Process the input with Gemini
    history_updated, text_output, _, _ = chatbot_response(message, history, session_id)

    # L∆∞u assistant response l√™n BE
    try:
        requests.post(
            f"{BE_URL}/messages",
            json={
                "session_id": session_id,
                "sender_type": "bot",
                "message_text": text_output,
            },
        ).raise_for_status()
    except Exception as e:
        print(f"Error saving bot message: {e}")

    return history_updated, "", None, None, session_id


def chatbot_response(message, history, session_id):
    history = [
        msg
        for msg in history
        if isinstance(msg, dict)
        and "role" in msg
        and "content" in msg
        and isinstance(msg["role"], str)
        and isinstance(msg["content"], str)
    ]

    # Load session state (gi·∫£ s·ª≠ gi·ªØ ·ªü memory, b·ªè DB)
    state = {"step": "none", "data": {}}  # N·∫øu c·∫ßn persist, t√≠ch h·ª£p BE

    # Prepare history for Gemini
    gemini_history = [
        {
            "role": "user" if msg["role"] == "user" else "model",
            "parts": [msg["content"]],
        }
        for msg in history[-10:]  # Limit to last 10 messages
    ]

    # Handle multimodal input
    image_part = None
    text_message = message
    if isinstance(message, dict) and "files" in message and message["files"]:
        image_path = message["files"][0]
        with open(image_path, "rb") as f:
            image_data = f.read()
        image_part = {"mime_type": "image/jpeg", "data": image_data}
        text_message = message.get("text", "")

    # System prompt (gi·ªØ nguy√™n)
    system_prompt = f"""You are a friendly, engaging chatbot for {RESTAURANT_NAME} restaurant. Respond in natural, lively Vietnamese, making conversations personalized and fun. Avoid robotic language. Use conversation history and session data to maintain context and ensure logical responses. If the user refers to previous topics (e.g., 'change my booking' or 'that cake'), use history to respond consistently. Start every response with **Kh√°ch**: <user input>.

Restaurant info:
- Address: {ADDRESS}
- Open hours: {OPEN_HOURS}
- Phone: {PHONE}
- Email: {EMAIL}
- Promotions: {PROMOTIONS}
- Payments: {PAYMENTS}
- Services: {SERVICES}
- Directions: {DIRECTIONS}
- Menu: {json.dumps(MENU, ensure_ascii=False)}
- Tables: {json.dumps(TABLES, ensure_ascii=False)}

Current reservations (phone-based, from DB): {json.dumps({}, ensure_ascii=False)}  # N·∫øu c·∫ßn, call BE API ƒë·ªÉ l·∫•y
Current state step: {state['step']}
Current session data: {json.dumps(state['data'], ensure_ascii=False)}
Conversation history (last 10): {json.dumps(gemini_history, ensure_ascii=False)}

Handle ALL customer queries comprehensively, referencing history for context:
1. Check/Edit/Cancel Reservation:
   - Ask for phone if unknown.
   - Show history/details, offer edit, cancel, or add orders.
   - Confirm actions, reference prior bookings (e.g., 'You booked for 4 last time').
2. Book Table:
   - Gather: event (suggest extras, e.g., birthday cake), seats, location/preferences (use suggest_table), menu_selected (use suggest_menu_based_on_history), allergies, special_requests, time, phone.
   - Apply promotions (e.g., group discount).
   - Confirm details before saving, reference past preferences.
3. Menu/Food Queries:
   - Describe dishes, prices, ingredients, estimated calories, availability.
   - Suggest based on preferences, history, or image analysis (e.g., 'You liked Grilled Salmon before').
   - Handle dine-in/takeaway/delivery orders.
4. Restaurant Services:
   - Answer about payments, promotions, services, directions, events, hours.
   - Handle special requests (catering, dietary needs, private events).
5. Vision AI:
   - If image ([image] in message), recognize dish, suggest similar from MENU.
6. General Queries:
   - Answer reviews, staff, hygiene, etc., relate to services, offer booking if relevant.
   - Clarify politely if unclear, referencing history if needed (e.g., 'You asked about WiFi earlier, did you mean...').

Personalize responses using history (e.g., 'D·ª±a tr√™n l·∫ßn tr∆∞·ªõc b·∫°n th√≠ch m√≥n n∆∞·ªõng...'). Ask for phone at end of booking/check if missing.

Output JSON:
{{
  "response": "string starting with **Kh√°ch**: <user input>",
  "next_step": "none" or "gather_event" or "gather_seats" or ...,
  "data_updates": {{}},
  "reservation_action": "none" or "save" or "update" or "cancel" or "check"
}}
"""

    # Send to Gemini
    content = [
        system_prompt
        + "\nUser message: "
        + (text_message if isinstance(text_message, str) else "")
    ]
    if image_part:
        content.append(image_part)

    chat = model.start_chat(history=gemini_history)
    try:
        gemini_response = chat.send_message(content)
        output_text = gemini_response.text.strip()
        if output_text.startswith("```json"):
            output_text = output_text[7:-3].strip()
        output = json.loads(output_text)
    except json.JSONDecodeError:
        history.append(
            {
                "role": "assistant",
                "content": f"**Kh√°ch**: {text_message}\nXin l·ªói, c√≥ l·ªói trong x·ª≠ l√Ω. H√£y th·ª≠ l·∫°i!",
            }
        )
        return history, "", None, None
    except Exception as e:
        print(f"Gemini error: {e}")
        history.append(
            {
                "role": "assistant",
                "content": f"**Kh√°ch**: {text_message}\nXin l·ªói, c√≥ l·ªói x·∫£y ra. H√£y th·ª≠ l·∫°i nh√©!",
            }
        )
        return history, "", None, None

    # Process output
    resp = output.get(
        "response",
        f"**Kh√°ch**: {text_message}\nXin l·ªói, t√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ ƒë·∫∑t b√†n, menu, ho·∫∑c d·ªãch v·ª• kh√¥ng?",
    )
    next_step = output.get("next_step", "none")
    updates = output.get("data_updates", {})
    action = output.get("reservation_action", "none")

    # Update state (memory)
    state["data"].update(updates)
    state["step"] = next_step

    # Handle reservation actions (gi·∫£ s·ª≠ call BE API cho reservations n·∫øu c√≥)
    # V√≠ d·ª•: if action == "save": requests.post(BE_RESERVATION_URL, json=data)

    if next_step == "none":
        # K·∫øt th√∫c session n·∫øu c·∫ßn
        try:
            requests.put(f"{BE_URL}/sessions/{session_id}", json={"status": "closed"})
        except:
            pass

    # Append assistant response to history
    history.append({"role": "assistant", "content": resp})
    return history, resp, None, None


def get_conversation_history(session_id):
    try:
        resp = requests.get(f"{BE_URL}/sessions/{session_id}/messages")
        resp.raise_for_status()
        messages = resp.json()
        return [
            {"role": msg["sender_type"], "content": msg["message_text"]}
            for msg in messages
        ]
    except Exception as e:
        print(f"Error fetching history: {e}")
        return []


# Gradio UI
def create_ui():
    with gr.Blocks(title=f"{RESTAURANT_NAME} Chatbot") as demo:
        gr.Markdown(f"# Chatbot {RESTAURANT_NAME} - ƒê·∫∑t B√†n, T∆∞ V·∫•n & G·ª£i √ù")
        gr.Markdown(
            f"Xin ch√†o! T√¥i h·ªó tr·ª£ ƒë·∫∑t b√†n, t∆∞ v·∫•n menu, d·ªãch v·ª•, v√† h∆°n th·∫ø n·ªØa.\nüìç ƒê·ªãa ch·ªâ: {ADDRESS}\nG·ª≠i h√¨nh ·∫£nh ƒë·ªÉ g·ª£i √Ω m√≥n, ho·∫∑c n√≥i ƒë·ªÉ t∆∞∆°ng t√°c!"
        )

        session_id = gr.State(None)
        chatbot = gr.Chatbot(height=400, type="messages")
        msg = gr.Textbox(placeholder="Nh·∫≠p tin nh·∫Øn...", label="B·∫°n:")
        audio = gr.Audio(
            sources=["microphone"], type="filepath", label="N√≥i ƒë·ªÉ ƒë·∫∑t b√†n"
        )
        image = gr.Image(type="filepath", label="G·ª≠i h√¨nh m√≥n ƒÉn")
        clear = gr.Button("X√≥a chat")

        def handle_submit(msg, audio, image, history, sess_id):
            history_updated, text_output, _, _, new_sess_id = process_input(
                msg, audio, image, history, sess_id
            )
            return history_updated, text_output, None, None, new_sess_id

        msg.submit(
            handle_submit,
            [msg, audio, image, chatbot, session_id],
            [chatbot, msg, audio, image, session_id],
        )
        audio.upload(
            handle_submit,
            [msg, audio, image, chatbot, session_id],
            [chatbot, msg, audio, image, session_id],
        )
        image.upload(
            handle_submit,
            [msg, audio, image, chatbot, session_id],
            [chatbot, msg, audio, image, session_id],
        )

        def clear_chat():
            return None, "", None, None, None

        clear.click(
            clear_chat, None, [chatbot, msg, audio, image, session_id], queue=False
        )

    return demo


if __name__ == "__main__":
    demo = create_ui()
    demo.launch(server_name="0.0.0.0", server_port=7860)
